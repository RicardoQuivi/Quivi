// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Quivi.Domain.Repositories.EntityFramework;

#nullable disable

namespace Quivi.Domain.Repositories.EntityFramework.Migrations
{
    [DbContext(typeof(QuiviContext))]
    [Migration("20251008173134_AddedAutoFieldsToAvailabilityGroup")]
    partial class AddedAutoFieldsToAvailabilityGroup
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationUserMerchant", b =>
                {
                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<int>("MerchantsId")
                        .HasColumnType("int");

                    b.HasKey("ApplicationUserId", "MerchantsId");

                    b.HasIndex("MerchantsId");

                    b.ToTable("ApplicationUserMerchant");
                });

            modelBuilder.Entity("OrderPreparationGroup", b =>
                {
                    b.Property<int>("OrdersId")
                        .HasColumnType("int");

                    b.Property<int>("PreparationGroupsId")
                        .HasColumnType("int");

                    b.HasKey("OrdersId", "PreparationGroupsId");

                    b.HasIndex("PreparationGroupsId");

                    b.ToTable("OrderPreparationGroup");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Charges.AcquirerCharge", b =>
                {
                    b.Property<int>("ChargeId")
                        .HasColumnType("int");

                    b.Property<string>("AcquirerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdditionalJsonContext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Culture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ChargeId");

                    b.ToTable("AcquirerCharges");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Charges.Charge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChainedChargeId")
                        .HasColumnType("int");

                    b.Property<int>("ChargeMethod")
                        .HasColumnType("int");

                    b.Property<int>("ChargePartner")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MerchantAcquirerConfigurationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChainedChargeId");

                    b.HasIndex("MerchantAcquirerConfigurationId");

                    b.ToTable("Charges");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Charges.Deposit", b =>
                {
                    b.Property<int>("ChargeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ConsumerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ChargeId");

                    b.HasIndex("ConsumerId");

                    b.ToTable("Deposit");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Charges.DepositCapture", b =>
                {
                    b.Property<int>("DepositId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("DepositId");

                    b.HasIndex("PersonId");

                    b.ToTable("DepositCaptures");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Charges.DepositCaptureJournal", b =>
                {
                    b.Property<int>("DepositId")
                        .HasColumnType("int");

                    b.Property<int>("JournalId")
                        .HasColumnType("int");

                    b.HasKey("DepositId");

                    b.HasIndex("JournalId");

                    b.ToTable("DepositCaptureJournals");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Charges.DepositJournal", b =>
                {
                    b.Property<int>("DepositId")
                        .HasColumnType("int");

                    b.Property<int>("JournalId")
                        .HasColumnType("int");

                    b.HasKey("DepositId");

                    b.HasIndex("JournalId");

                    b.ToTable("DepositJournals");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Charges.DepositSurcharge", b =>
                {
                    b.Property<int>("DepositId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("AppliedUnit")
                        .HasColumnType("int");

                    b.Property<decimal>("AppliedValue")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("DepositId");

                    b.ToTable("DepositSurcharges");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Charges.DepositSurchargeJournal", b =>
                {
                    b.Property<int>("DepositId")
                        .HasColumnType("int");

                    b.Property<int>("JournalId")
                        .HasColumnType("int");

                    b.HasKey("DepositId");

                    b.HasIndex("JournalId");

                    b.ToTable("DepositSurchargeJournal");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Financing.DepositRefundJournal", b =>
                {
                    b.Property<int>("DepositId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("JournalId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DepositId");

                    b.HasIndex("JournalId");

                    b.ToTable("DepositRefundJournals");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Financing.Journal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChargeMethod")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("JournalLinkId")
                        .HasColumnType("int");

                    b.Property<int?>("Method")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderRef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JournalLinkId");

                    b.ToTable("Journals");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Financing.JournalChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("JournalId")
                        .HasColumnType("int");

                    b.Property<int?>("JournalId1")
                        .HasColumnType("int");

                    b.Property<int?>("JournalLinkId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JournalId");

                    b.HasIndex("JournalId1");

                    b.HasIndex("JournalLinkId");

                    b.ToTable("JournalChanges");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Financing.JournalDetails", b =>
                {
                    b.Property<int>("JournalId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("IncludedTip")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("JournalId");

                    b.ToTable("JournalDetails");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Financing.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("bit");

                    b.Property<int?>("MerchantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PersonType")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("SubMerchantId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Vat")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeletedDate")
                        .HasDatabaseName("IX_T_DeletedDate_NotDeleted")
                        .HasFilter("[DeletedDate] IS NULL");

                    b.HasIndex("IsAnonymous")
                        .IsUnique()
                        .HasFilter("[IsAnonymous] = 1");

                    b.HasIndex("MerchantId");

                    b.HasIndex("SubMerchantId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("People");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Financing.Posting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AssetType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("JournalId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JournalId");

                    b.HasIndex("PersonId");

                    b.ToTable("Postings");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Financing.Settlement", b =>
                {
                    b.Property<int>("SettlementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SettlementId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("SettlementId");

                    b.ToTable("Settlements");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Financing.SettlementDetail", b =>
                {
                    b.Property<int>("SettlementDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SettlementDetailId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ChargeMethod")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatetimeUTC")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("FeeAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("IncludedNetTip")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("IncludedTip")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("JournalId")
                        .HasColumnType("int");

                    b.Property<int>("MerchantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("NetAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("SettlementDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SettlementDays")
                        .HasColumnType("int");

                    b.Property<int>("SettlementId")
                        .HasColumnType("int");

                    b.Property<string>("SubMerchantIban")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubMerchantId")
                        .HasColumnType("int");

                    b.Property<decimal>("SubMerchantVatRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TransactionFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SettlementDetailId");

                    b.HasIndex("JournalId");

                    b.HasIndex("MerchantId");

                    b.HasIndex("SettlementId");

                    b.HasIndex("SubMerchantId");

                    b.ToTable("SettlementDetails");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Financing.SettlementServiceDetail", b =>
                {
                    b.Property<int>("SettlementServiceDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SettlementServiceDetailId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("JournalId")
                        .HasColumnType("int");

                    b.Property<int>("MerchantId")
                        .HasColumnType("int");

                    b.Property<int>("MerchantServiceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SettlementId")
                        .HasColumnType("int");

                    b.Property<string>("SubMerchantIban")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubMerchantId")
                        .HasColumnType("int");

                    b.Property<decimal>("SubMerchantVatRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SettlementServiceDetailId");

                    b.HasIndex("JournalId");

                    b.HasIndex("MerchantId");

                    b.HasIndex("MerchantServiceId");

                    b.HasIndex("SettlementId");

                    b.HasIndex("SubMerchantId");

                    b.ToTable("SettlementServiceDetails");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Identity.ApiClient", b =>
                {
                    b.Property<int>("ApiClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApiClientId"));

                    b.Property<int>("ClientType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastActivity")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MerchantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.HasKey("ApiClientId");

                    b.HasIndex("DeletedDate")
                        .HasDatabaseName("IX_T_DeletedDate_NotDeleted")
                        .HasFilter("[DeletedDate] IS NULL");

                    b.HasIndex("MerchantId");

                    b.HasIndex("PersonId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("ApiClients");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Identity.ApiClientRequest", b =>
                {
                    b.Property<int>("ApiClientRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApiClientRequestId"));

                    b.Property<int?>("ApiClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceReference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RedeemCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<int>("Source")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SubMerchantId")
                        .HasColumnType("int");

                    b.HasKey("ApiClientRequestId");

                    b.HasIndex("ApiClientId");

                    b.HasIndex("SubMerchantId");

                    b.ToTable("ApiClientRequests");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Merchants.Merchant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DisabledFeatures")
                        .HasColumnType("int");

                    b.Property<string>("FiscalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Iban")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IbanProofUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDemo")
                        .HasColumnType("bit");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentMerchantId")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SetUpFeeId")
                        .HasColumnType("int");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SurchargeFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SurchargeFeeUnit")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TermsAndConditionsAcceptedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TransactionFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TransactionFeeUnit")
                        .HasColumnType("int");

                    b.Property<string>("VatNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("VatRate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("DeletedDate")
                        .HasDatabaseName("IX_T_DeletedDate_NotDeleted")
                        .HasFilter("[DeletedDate] IS NULL");

                    b.HasIndex("ParentMerchantId");

                    b.HasIndex("SetUpFeeId");

                    b.ToTable("Merchants");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Merchants.MerchantAcquirerConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApiKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ChargeMethod")
                        .HasColumnType("int");

                    b.Property<int>("ChargePartner")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ExternallySettled")
                        .HasColumnType("bit");

                    b.Property<int>("MerchantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PublicKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TerminalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebhookSecret")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChargeMethod");

                    b.HasIndex("ChargePartner");

                    b.HasIndex("DeletedDate")
                        .HasDatabaseName("IX_T_DeletedDate_NotDeleted")
                        .HasFilter("[DeletedDate] IS NULL");

                    b.HasIndex("MerchantId");

                    b.ToTable("MerchantAcquirerConfiguration");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Merchants.MerchantFee", b =>
                {
                    b.Property<int>("MerchantId")
                        .HasColumnType("int");

                    b.Property<int>("ChargeMethod")
                        .HasColumnType("int");

                    b.Property<int>("FeeType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FeeUnit")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MerchantId", "ChargeMethod", "FeeType");

                    b.HasIndex("DeletedDate")
                        .HasDatabaseName("IX_T_DeletedDate_NotDeleted")
                        .HasFilter("[DeletedDate] IS NULL");

                    b.ToTable("MerchantFees");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Merchants.MerchantFile", b =>
                {
                    b.Property<int>("MerchantFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MerchantFileId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileMetadata")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MerchantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MerchantFileId");

                    b.HasIndex("DeletedDate")
                        .HasDatabaseName("IX_T_DeletedDate_NotDeleted")
                        .HasFilter("[DeletedDate] IS NULL");

                    b.HasIndex("MerchantId");

                    b.ToTable("MerchantFile");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Merchants.MerchantService", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MerchantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("PersonId");

                    b.HasIndex("MerchantId");

                    b.ToTable("MerchantServices");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Notifications.AuditNotification", b =>
                {
                    b.Property<int>("AuditNotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditNotificationId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastSentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("NotificationType")
                        .HasColumnType("bigint");

                    b.Property<int>("NotificationsContactId")
                        .HasColumnType("int");

                    b.HasKey("AuditNotificationId");

                    b.HasIndex("NotificationsContactId", "NotificationType")
                        .IsUnique();

                    b.ToTable("AuditNotification");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Notifications.EmployeeNotificationsContact", b =>
                {
                    b.Property<int>("NotificationsContactId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("NotificationsContactId");

                    b.HasIndex("DeletedDate")
                        .HasDatabaseName("IX_T_DeletedDate_NotDeleted")
                        .HasFilter("[DeletedDate] IS NULL");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeNotificationsContact");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Notifications.NotificationsContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MerchantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("SubscribedNotifications")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DeletedDate")
                        .HasDatabaseName("IX_T_DeletedDate_NotDeleted")
                        .HasFilter("[DeletedDate] IS NULL");

                    b.HasIndex("MerchantId");

                    b.ToTable("NotificationsContacts");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Notifications.PrinterMessageTarget", b =>
                {
                    b.Property<int>("PrinterNotificationsContactId")
                        .HasColumnType("int");

                    b.Property<int>("PrinterNotificationMessageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RequestedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("PrinterNotificationsContactId", "PrinterNotificationMessageId");

                    b.HasIndex("PrinterNotificationMessageId");

                    b.ToTable("PrinterMessageTarget");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Notifications.PrinterNotificationMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContentType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MerchantId")
                        .HasColumnType("int");

                    b.Property<long>("MessageType")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MerchantId");

                    b.ToTable("PrinterNotificationMessage");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Notifications.PrinterNotificationsContact", b =>
                {
                    b.Property<int>("NotificationsContactId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("PrinterWorkerId")
                        .HasColumnType("int");

                    b.HasKey("NotificationsContactId");

                    b.HasIndex("DeletedDate")
                        .HasDatabaseName("IX_T_DeletedDate_NotDeleted")
                        .HasFilter("[DeletedDate] IS NULL");

                    b.HasIndex("LocationId");

                    b.HasIndex("PrinterWorkerId");

                    b.ToTable("PrinterNotificationsContact");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Notifications.PushNotificationDevice", b =>
                {
                    b.Property<int>("PushNotificationDeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PushNotificationDeviceId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceToken")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("char");

                    b.Property<int>("DeviceType")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<Guid>("SessionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PushNotificationDeviceId");

                    b.HasIndex("DeletedDate")
                        .HasDatabaseName("IX_T_DeletedDate_NotDeleted")
                        .HasFilter("[DeletedDate] IS NULL");

                    b.HasIndex("PersonId");

                    b.ToTable("ApnsConnection");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Notifications.PushNotificationsContact", b =>
                {
                    b.Property<int>("NotificationsContactId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("PushDeviceId")
                        .HasColumnType("int");

                    b.HasKey("NotificationsContactId");

                    b.HasIndex("DeletedDate")
                        .HasDatabaseName("IX_T_DeletedDate_NotDeleted")
                        .HasFilter("[DeletedDate] IS NULL");

                    b.HasIndex("PushDeviceId")
                        .IsUnique();

                    b.ToTable("PushNotificationsContact");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.AvailabilityGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AutoAddNewChannelProfiles")
                        .HasColumnType("bit");

                    b.Property<bool>("AutoAddNewMenuItems")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MerchantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MerchantId");

                    b.ToTable("Availabilities");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.AvailabilityMenuItemAssociation", b =>
                {
                    b.Property<int>("AvailabilityGroupId")
                        .HasColumnType("int");

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AvailabilityGroupId", "MenuItemId");

                    b.HasIndex("MenuItemId");

                    b.ToTable("AvailabilityMenuItemAssociation");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.AvailabilityProfileAssociation", b =>
                {
                    b.Property<int>("AvailabilityGroupId")
                        .HasColumnType("int");

                    b.Property<int>("ChannelProfileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AvailabilityGroupId", "ChannelProfileId");

                    b.HasIndex("ChannelProfileId");

                    b.ToTable("AvailabilityProfileAssociation");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.Channel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChannelProfileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IdentifierSortable")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MerchantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PoSIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeletedDate")
                        .HasDatabaseName("IX_T_DeletedDate_NotDeleted")
                        .HasFilter("[DeletedDate] IS NULL");

                    b.HasIndex("MerchantId");

                    b.HasIndex("ChannelProfileId", "Identifier")
                        .IsUnique();

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.ChannelProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Features")
                        .HasColumnType("int");

                    b.Property<int>("MerchantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PosIntegrationId")
                        .HasColumnType("int");

                    b.Property<decimal?>("PrePaidOrderingMinimumAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("SendToPreparationTimerSeconds")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeletedDate")
                        .HasDatabaseName("IX_T_DeletedDate_NotDeleted")
                        .HasFilter("[DeletedDate] IS NULL");

                    b.HasIndex("MerchantId");

                    b.HasIndex("PosIntegrationId");

                    b.ToTable("ChannelProfile");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.CustomChargeMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MerchantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MerchantId");

                    b.ToTable("CustomChargeMethods");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LogoutInactivityInSeconds")
                        .HasColumnType("int");

                    b.Property<int>("MerchantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PinCodeHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PosIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Restrictions")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeletedDate")
                        .HasDatabaseName("IX_T_DeletedDate_NotDeleted")
                        .HasFilter("[DeletedDate] IS NULL");

                    b.HasIndex("MerchantId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.ItemCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MerchantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("SortIndex")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeletedDate")
                        .HasDatabaseName("IX_T_DeletedDate_NotDeleted")
                        .HasFilter("[DeletedDate] IS NULL");

                    b.HasIndex("MerchantId");

                    b.ToTable("ItemCategories");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.ItemCategoryTranslation", b =>
                {
                    b.Property<int>("ItemCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ItemCategoryId", "Language");

                    b.HasIndex("DeletedDate")
                        .HasDatabaseName("IX_T_DeletedDate_NotDeleted")
                        .HasFilter("[DeletedDate] IS NULL");

                    b.ToTable("ItemCategoryTranslation");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.ItemsModifierGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxSelection")
                        .HasColumnType("int");

                    b.Property<int>("MerchantId")
                        .HasColumnType("int");

                    b.Property<int>("MinSelection")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("Id");

                    b.HasIndex("DeletedDate")
                        .HasDatabaseName("IX_T_DeletedDate_NotDeleted")
                        .HasFilter("[DeletedDate] IS NULL");

                    b.HasIndex("MerchantId");

                    b.ToTable("ItemsModifierGroups");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.ItemsModifierGroupTranslation", b =>
                {
                    b.Property<int>("MenuItemModifierGroupId")
                        .HasColumnType("int");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MenuItemModifierGroupId", "Language");

                    b.HasIndex("DeletedDate")
                        .HasDatabaseName("IX_T_DeletedDate_NotDeleted")
                        .HasFilter("[DeletedDate] IS NULL");

                    b.ToTable("ItemsModifierGroupTranslation");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.ItemsModifierGroupsAssociation", b =>
                {
                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<int>("MenuItemModifierGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SortIndex")
                        .HasColumnType("int");

                    b.HasKey("MenuItemId", "MenuItemModifierGroupId");

                    b.HasIndex("MenuItemModifierGroupId");

                    b.ToTable("ItemsModifierGroupsAssociation");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MerchantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeletedDate")
                        .HasDatabaseName("IX_T_DeletedDate_NotDeleted")
                        .HasFilter("[DeletedDate] IS NULL");

                    b.HasIndex("MerchantId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HiddenFromGuestApp")
                        .HasColumnType("bit");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("MerchantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PriceType")
                        .HasColumnType("int");

                    b.Property<bool>("ShowWhenNotAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("SortIndex")
                        .HasColumnType("int");

                    b.Property<bool>("Stock")
                        .HasColumnType("bit");

                    b.Property<decimal>("VatRate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("DeletedDate")
                        .HasDatabaseName("IX_T_DeletedDate_NotDeleted")
                        .HasFilter("[DeletedDate] IS NULL");

                    b.HasIndex("LocationId");

                    b.HasIndex("MerchantId");

                    b.ToTable("MenuItems");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.MenuItemCategoryAssociation", b =>
                {
                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<int>("ItemCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SortIndex")
                        .HasColumnType("int");

                    b.HasKey("MenuItemId", "ItemCategoryId");

                    b.HasIndex("ItemCategoryId");

                    b.ToTable("MenuItemCategoryAssociation");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.MenuItemModifier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<int>("MenuItemModifierGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SortIndex")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeletedDate")
                        .HasDatabaseName("IX_T_DeletedDate_NotDeleted")
                        .HasFilter("[DeletedDate] IS NULL");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("MenuItemModifierGroupId");

                    b.ToTable("MenuItemModifier");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.MenuItemTranslation", b =>
                {
                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MenuItemId", "Language");

                    b.HasIndex("DeletedDate")
                        .HasDatabaseName("IX_T_DeletedDate_NotDeleted")
                        .HasFilter("[DeletedDate] IS NULL");

                    b.ToTable("MenuItemTranslation");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.MerchantCustomCharge", b =>
                {
                    b.Property<int>("ChargeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomChargeMethodId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ChargeId");

                    b.HasIndex("CustomChargeMethodId");

                    b.ToTable("MerchantCustomCharge");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.MerchantInvoiceDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChargeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentId")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<string>("DocumentReference")
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<int>("Format")
                        .HasColumnType("int");

                    b.Property<int>("MerchantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChargeId");

                    b.HasIndex("MerchantId");

                    b.ToTable("MerchantInvoiceDocuments");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChannelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("MerchantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderType")
                        .HasColumnType("int");

                    b.Property<int>("Origin")
                        .HasColumnType("int");

                    b.Property<bool>("PayLater")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ScheduledTo")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SessionId")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("MerchantId");

                    b.HasIndex("SessionId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.OrderAdditionalInfo", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("OrderConfigurableFieldId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderId", "OrderConfigurableFieldId");

                    b.HasIndex("OrderConfigurableFieldId");

                    b.ToTable("OrderAdditionalInfo");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.OrderChangeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderChangeLogs");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.OrderConfigurableField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssignedOn")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAutoFill")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int>("MerchantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrintedOn")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeletedDate")
                        .HasDatabaseName("IX_T_DeletedDate_NotDeleted")
                        .HasFilter("[DeletedDate] IS NULL");

                    b.HasIndex("MerchantId");

                    b.ToTable("OrderConfigurableField");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.OrderConfigurableFieldChannelProfileAssociation", b =>
                {
                    b.Property<int>("OrderConfigurableFieldId")
                        .HasColumnType("int");

                    b.Property<int>("ChannelProfileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderConfigurableFieldId", "ChannelProfileId");

                    b.HasIndex("ChannelProfileId");

                    b.ToTable("OrderConfigurableFieldChannelProfileAssociation");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.OrderConfigurableFieldTranslation", b =>
                {
                    b.Property<int>("OrderConfigurableFieldId")
                        .HasColumnType("int");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderConfigurableFieldId", "Language");

                    b.HasIndex("DeletedDate")
                        .HasDatabaseName("IX_T_DeletedDate_NotDeleted")
                        .HasFilter("[DeletedDate] IS NULL");

                    b.ToTable("OrderConfigurableFieldTranslation");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.OrderMenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("FinalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<int?>("MenuItemModifierGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ParentOrderMenuItemId")
                        .HasColumnType("int");

                    b.Property<int>("PriceType")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(38, 18)
                        .HasColumnType("decimal(38,18)");

                    b.Property<decimal>("VatRate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("MenuItemModifierGroupId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ParentOrderMenuItemId");

                    b.ToTable("OrderMenuItems");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.OrderSequence", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("SequenceNumber")
                        .HasColumnType("bigint");

                    b.HasKey("OrderId");

                    b.ToTable("OrderSequence");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.PosCharge", b =>
                {
                    b.Property<int>("ChargeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CaptureDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ChannelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("InvoiceRefundType")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("MerchantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Observations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Payment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PaymentRefund")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RefundEmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("RefundReason")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("SessionId")
                        .HasColumnType("int");

                    b.Property<decimal>("SurchargeFeeAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Tip")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TipRefund")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalRefund")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("VatNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChargeId");

                    b.HasIndex("ChannelId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LocationId");

                    b.HasIndex("MerchantId");

                    b.HasIndex("RefundEmployeeId");

                    b.HasIndex("SessionId");

                    b.ToTable("PosCharges");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.PosChargeInvoiceItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderMenuItemId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentPosChargeInvoiceItemId")
                        .HasColumnType("int");

                    b.Property<int>("PosChargeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(38, 18)
                        .HasColumnType("decimal(38,18)");

                    b.HasKey("Id");

                    b.HasIndex("OrderMenuItemId");

                    b.HasIndex("ParentPosChargeInvoiceItemId");

                    b.HasIndex("PosChargeId");

                    b.ToTable("PosChargeInvoiceItem");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.PosChargeSelectedMenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderMenuItemId")
                        .HasColumnType("int");

                    b.Property<int>("PosChargeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(38, 18)
                        .HasColumnType("decimal(38,18)");

                    b.HasKey("Id");

                    b.HasIndex("OrderMenuItemId");

                    b.HasIndex("PosChargeId");

                    b.ToTable("PosChargeSelectedMenuItem");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.PosChargeSyncAttempt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PosChargeId")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<decimal>("SyncedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PosChargeId");

                    b.ToTable("PosChargeSyncAttempt");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.PosIntegration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConnectionString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DiagnosticErrorsMuted")
                        .HasColumnType("bit");

                    b.Property<int>("IntegrationType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastSyncingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MerchantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SyncState")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SyncStateModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DeletedDate")
                        .HasDatabaseName("IX_T_DeletedDate_NotDeleted")
                        .HasFilter("[DeletedDate] IS NULL");

                    b.HasIndex("IntegrationType");

                    b.HasIndex("MerchantId");

                    b.ToTable("PosIntegrations");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.PosNotificationInboxMessage", b =>
                {
                    b.Property<int>("PosNotificationMessageId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PosNotificationMessageId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("PosNotificationInboxMessages");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.PosNotificationMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("JsonMessage")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MerchantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("Type")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MerchantId");

                    b.ToTable("PosNotificationMessages");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.PreparationGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MerchantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ParentPreparationGroupId")
                        .HasColumnType("int");

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MerchantId");

                    b.HasIndex("ParentPreparationGroupId");

                    b.HasIndex("SessionId");

                    b.ToTable("PreparationGroups");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.PreparationGroupItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OriginalQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("ParentPreparationGroupItemId")
                        .HasColumnType("int");

                    b.Property<int>("PreparationGroupId")
                        .HasColumnType("int");

                    b.Property<int>("RemainingQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("ParentPreparationGroupItemId");

                    b.HasIndex("PreparationGroupId");

                    b.ToTable("PreparationGroupItems");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.PrinterWorker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MerchantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Identifier")
                        .IsUnique();

                    b.HasIndex("MerchantId");

                    b.ToTable("PrinterWorker");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.Review", b =>
                {
                    b.Property<int>("PosChargeId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Stars")
                        .HasColumnType("int");

                    b.HasKey("PosChargeId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChannelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PosIdentifier")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.SpatialChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChannelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("RelativePositionX")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RelativePositionY")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Shape")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("DeletedDate")
                        .HasDatabaseName("IX_T_DeletedDate_NotDeleted")
                        .HasFilter("[DeletedDate] IS NULL");

                    b.ToTable("SpatialChannel");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.WeeklyAvailability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailabilityGroupId")
                        .HasColumnType("int");

                    b.Property<int>("EndAtSeconds")
                        .HasColumnType("int");

                    b.Property<int>("StartAtSeconds")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilityGroupId");

                    b.ToTable("WeeklyAvailability");
                });

            modelBuilder.Entity("Quivi.Domain.Repositories.EntityFramework.Identity.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Quivi.Domain.Repositories.EntityFramework.Identity.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Quivi.Domain.Repositories.EntityFramework.Identity.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Quivi.Domain.Repositories.EntityFramework.Identity.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "ClaimType")
                        .IsUnique()
                        .HasFilter("[ClaimType] IS NOT NULL");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Quivi.Domain.Repositories.EntityFramework.Identity.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Quivi.Domain.Repositories.EntityFramework.Identity.ApplicationUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Quivi.Domain.Repositories.EntityFramework.Identity.ApplicationUserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ApplicationUserMerchant", b =>
                {
                    b.HasOne("Quivi.Domain.Repositories.EntityFramework.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quivi.Domain.Entities.Merchants.Merchant", null)
                        .WithMany()
                        .HasForeignKey("MerchantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrderPreparationGroup", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Pos.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quivi.Domain.Entities.Pos.PreparationGroup", null)
                        .WithMany()
                        .HasForeignKey("PreparationGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Charges.AcquirerCharge", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Charges.Charge", "Charge")
                        .WithOne("AcquirerCharge")
                        .HasForeignKey("Quivi.Domain.Entities.Charges.AcquirerCharge", "ChargeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Charge");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Charges.Charge", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Charges.Charge", "ChainedCharge")
                        .WithMany()
                        .HasForeignKey("ChainedChargeId");

                    b.HasOne("Quivi.Domain.Entities.Merchants.MerchantAcquirerConfiguration", "MerchantAcquirerConfiguration")
                        .WithMany()
                        .HasForeignKey("MerchantAcquirerConfigurationId");

                    b.Navigation("ChainedCharge");

                    b.Navigation("MerchantAcquirerConfiguration");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Charges.Deposit", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Charges.Charge", "Charge")
                        .WithOne("Deposit")
                        .HasForeignKey("Quivi.Domain.Entities.Charges.Deposit", "ChargeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quivi.Domain.Entities.Financing.Person", "Consumer")
                        .WithMany()
                        .HasForeignKey("ConsumerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Charge");

                    b.Navigation("Consumer");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Charges.DepositCapture", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Charges.Deposit", "Deposit")
                        .WithOne("DepositCapture")
                        .HasForeignKey("Quivi.Domain.Entities.Charges.DepositCapture", "DepositId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quivi.Domain.Entities.Financing.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deposit");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Charges.DepositCaptureJournal", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Charges.Deposit", "Deposit")
                        .WithOne("DepositCaptureJournal")
                        .HasForeignKey("Quivi.Domain.Entities.Charges.DepositCaptureJournal", "DepositId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quivi.Domain.Entities.Financing.Journal", "Journal")
                        .WithMany("DepositCaptureJournals")
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deposit");

                    b.Navigation("Journal");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Charges.DepositJournal", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Charges.Deposit", "Deposit")
                        .WithOne("DepositJournal")
                        .HasForeignKey("Quivi.Domain.Entities.Charges.DepositJournal", "DepositId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quivi.Domain.Entities.Financing.Journal", "Journal")
                        .WithMany("DepositJournals")
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deposit");

                    b.Navigation("Journal");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Charges.DepositSurcharge", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Charges.Deposit", "Deposit")
                        .WithOne("DepositSurchage")
                        .HasForeignKey("Quivi.Domain.Entities.Charges.DepositSurcharge", "DepositId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deposit");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Charges.DepositSurchargeJournal", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Charges.Deposit", "Deposit")
                        .WithOne("DepositSurchargeJournal")
                        .HasForeignKey("Quivi.Domain.Entities.Charges.DepositSurchargeJournal", "DepositId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quivi.Domain.Entities.Financing.Journal", "Journal")
                        .WithMany("DepositSurchargeJournals")
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deposit");

                    b.Navigation("Journal");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Financing.DepositRefundJournal", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Charges.Deposit", "Deposit")
                        .WithOne("DepositRefundJournal")
                        .HasForeignKey("Quivi.Domain.Entities.Financing.DepositRefundJournal", "DepositId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quivi.Domain.Entities.Financing.Journal", "Journal")
                        .WithMany("DepositRefundJournals")
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deposit");

                    b.Navigation("Journal");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Financing.Journal", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Financing.Journal", "JournalLink")
                        .WithMany()
                        .HasForeignKey("JournalLinkId");

                    b.Navigation("JournalLink");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Financing.JournalChange", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Financing.Journal", "Journal")
                        .WithMany()
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quivi.Domain.Entities.Financing.Journal", null)
                        .WithMany("JournalChanges")
                        .HasForeignKey("JournalId1");

                    b.HasOne("Quivi.Domain.Entities.Financing.Journal", "JournalLink")
                        .WithMany()
                        .HasForeignKey("JournalLinkId");

                    b.Navigation("Journal");

                    b.Navigation("JournalLink");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Financing.JournalDetails", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Financing.Journal", "Journal")
                        .WithOne("JournalDetails")
                        .HasForeignKey("Quivi.Domain.Entities.Financing.JournalDetails", "JournalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Journal");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Financing.Person", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Merchants.Merchant", "Merchant")
                        .WithMany()
                        .HasForeignKey("MerchantId");

                    b.HasOne("Quivi.Domain.Entities.Merchants.Merchant", "SubMerchant")
                        .WithMany("People")
                        .HasForeignKey("SubMerchantId");

                    b.HasOne("Quivi.Domain.Repositories.EntityFramework.Identity.ApplicationUser", null)
                        .WithOne("Person")
                        .HasForeignKey("Quivi.Domain.Entities.Financing.Person", "UserId");

                    b.Navigation("Merchant");

                    b.Navigation("SubMerchant");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Financing.Posting", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Financing.Journal", "Journal")
                        .WithMany("Postings")
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quivi.Domain.Entities.Financing.Person", "Person")
                        .WithMany("Postings")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Journal");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Financing.SettlementDetail", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Financing.Journal", "Journal")
                        .WithMany("SettlementDetails")
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Quivi.Domain.Entities.Merchants.Merchant", "Merchant")
                        .WithMany()
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Quivi.Domain.Entities.Financing.Settlement", "Settlement")
                        .WithMany("SettlementDetails")
                        .HasForeignKey("SettlementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quivi.Domain.Entities.Merchants.Merchant", "SubMerchant")
                        .WithMany()
                        .HasForeignKey("SubMerchantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Journal");

                    b.Navigation("Merchant");

                    b.Navigation("Settlement");

                    b.Navigation("SubMerchant");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Financing.SettlementServiceDetail", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Financing.Journal", "Journal")
                        .WithMany("SettlementServiceDetails")
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Quivi.Domain.Entities.Merchants.Merchant", "Merchant")
                        .WithMany()
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Quivi.Domain.Entities.Merchants.MerchantService", "MerchantService")
                        .WithMany()
                        .HasForeignKey("MerchantServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quivi.Domain.Entities.Financing.Settlement", "Settlement")
                        .WithMany("SettlementServiceDetails")
                        .HasForeignKey("SettlementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quivi.Domain.Entities.Merchants.Merchant", "SubMerchant")
                        .WithMany()
                        .HasForeignKey("SubMerchantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Journal");

                    b.Navigation("Merchant");

                    b.Navigation("MerchantService");

                    b.Navigation("Settlement");

                    b.Navigation("SubMerchant");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Identity.ApiClient", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Merchants.Merchant", null)
                        .WithMany("ApiClients")
                        .HasForeignKey("MerchantId");

                    b.HasOne("Quivi.Domain.Entities.Financing.Person", "Person")
                        .WithMany("ApiClients")
                        .HasForeignKey("PersonId");

                    b.HasOne("Quivi.Domain.Repositories.EntityFramework.Identity.ApplicationUser", null)
                        .WithMany("ApiClients")
                        .HasForeignKey("UserId");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Identity.ApiClientRequest", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Identity.ApiClient", "ApiClient")
                        .WithMany("ApiClientRequests")
                        .HasForeignKey("ApiClientId");

                    b.HasOne("Quivi.Domain.Entities.Merchants.Merchant", "SubMerchant")
                        .WithMany()
                        .HasForeignKey("SubMerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiClient");

                    b.Navigation("SubMerchant");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Merchants.Merchant", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Merchants.Merchant", "ParentMerchant")
                        .WithMany("ChildMerchants")
                        .HasForeignKey("ParentMerchantId");

                    b.HasOne("Quivi.Domain.Entities.Merchants.MerchantService", "SetUpFee")
                        .WithMany()
                        .HasForeignKey("SetUpFeeId");

                    b.Navigation("ParentMerchant");

                    b.Navigation("SetUpFee");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Merchants.MerchantAcquirerConfiguration", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Merchants.Merchant", "Merchant")
                        .WithMany("AcquirerConfigurations")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Merchants.MerchantFee", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Merchants.Merchant", "Merchant")
                        .WithMany("Fees")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Merchants.MerchantFile", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Merchants.Merchant", "Merchant")
                        .WithMany("Files")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Merchants.MerchantService", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Merchants.Merchant", "Merchant")
                        .WithMany("MerchantServices")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quivi.Domain.Entities.Financing.Person", "Person")
                        .WithOne("MerchantService")
                        .HasForeignKey("Quivi.Domain.Entities.Merchants.MerchantService", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Merchant");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Notifications.AuditNotification", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Notifications.NotificationsContact", "NotificationsContact")
                        .WithMany("AuditNotifications")
                        .HasForeignKey("NotificationsContactId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("NotificationsContact");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Notifications.EmployeeNotificationsContact", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Pos.Employee", "Employee")
                        .WithMany("EmployeeContacts")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Quivi.Domain.Entities.Notifications.NotificationsContact", "BaseNotificationsContact")
                        .WithOne("EmployeeContact")
                        .HasForeignKey("Quivi.Domain.Entities.Notifications.EmployeeNotificationsContact", "NotificationsContactId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BaseNotificationsContact");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Notifications.NotificationsContact", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Merchants.Merchant", "Merchant")
                        .WithMany("NotificationContacts")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Notifications.PrinterMessageTarget", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Notifications.PrinterNotificationMessage", "PrinterNotificationMessage")
                        .WithMany("PrinterMessageTargets")
                        .HasForeignKey("PrinterNotificationMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quivi.Domain.Entities.Notifications.PrinterNotificationsContact", "PrinterNotificationsContact")
                        .WithMany("PrinterMessageTargets")
                        .HasForeignKey("PrinterNotificationsContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrinterNotificationMessage");

                    b.Navigation("PrinterNotificationsContact");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Notifications.PrinterNotificationMessage", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Merchants.Merchant", "Merchant")
                        .WithMany()
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Notifications.PrinterNotificationsContact", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Pos.Location", "Location")
                        .WithMany("PrinterNotificationsContacts")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Quivi.Domain.Entities.Notifications.NotificationsContact", "BaseNotificationsContact")
                        .WithOne("PrinterContact")
                        .HasForeignKey("Quivi.Domain.Entities.Notifications.PrinterNotificationsContact", "NotificationsContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quivi.Domain.Entities.Pos.PrinterWorker", "PrinterWorker")
                        .WithMany("PrinterNotificationsContacts")
                        .HasForeignKey("PrinterWorkerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BaseNotificationsContact");

                    b.Navigation("Location");

                    b.Navigation("PrinterWorker");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Notifications.PushNotificationDevice", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Financing.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Notifications.PushNotificationsContact", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Notifications.NotificationsContact", "BaseNotificationsContact")
                        .WithOne("PushContact")
                        .HasForeignKey("Quivi.Domain.Entities.Notifications.PushNotificationsContact", "NotificationsContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quivi.Domain.Entities.Notifications.PushNotificationDevice", "PushDevice")
                        .WithMany("Contacts")
                        .HasForeignKey("PushDeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BaseNotificationsContact");

                    b.Navigation("PushDevice");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.AvailabilityGroup", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Merchants.Merchant", "Merchant")
                        .WithMany()
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.AvailabilityMenuItemAssociation", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Pos.AvailabilityGroup", "AvailabilityGroup")
                        .WithMany("AssociatedMenuItems")
                        .HasForeignKey("AvailabilityGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quivi.Domain.Entities.Pos.MenuItem", "MenuItem")
                        .WithMany("AssociatedAvailabilityGroups")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilityGroup");

                    b.Navigation("MenuItem");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.AvailabilityProfileAssociation", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Pos.AvailabilityGroup", "AvailabilityGroup")
                        .WithMany("AssociatedChannelProfiles")
                        .HasForeignKey("AvailabilityGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quivi.Domain.Entities.Pos.ChannelProfile", "ChannelProfile")
                        .WithMany("AssociatedAvailabilityGroups")
                        .HasForeignKey("ChannelProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilityGroup");

                    b.Navigation("ChannelProfile");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.Channel", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Pos.ChannelProfile", "ChannelProfile")
                        .WithMany("Channels")
                        .HasForeignKey("ChannelProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quivi.Domain.Entities.Merchants.Merchant", "Merchant")
                        .WithMany("Channels")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ChannelProfile");

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.ChannelProfile", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Merchants.Merchant", "Merchant")
                        .WithMany("ChannelProfiles")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Quivi.Domain.Entities.Pos.PosIntegration", "PosIntegration")
                        .WithMany("ChannelProfiles")
                        .HasForeignKey("PosIntegrationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Merchant");

                    b.Navigation("PosIntegration");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.CustomChargeMethod", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Merchants.Merchant", "Merchant")
                        .WithMany("CustomChargeMethods")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.Employee", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Merchants.Merchant", "Merchant")
                        .WithMany()
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.ItemCategory", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Merchants.Merchant", "Merchant")
                        .WithMany()
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.ItemCategoryTranslation", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Pos.ItemCategory", "ItemCategory")
                        .WithMany("ItemCategoryTranslations")
                        .HasForeignKey("ItemCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ItemCategory");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.ItemsModifierGroup", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Merchants.Merchant", "Merchant")
                        .WithMany()
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.ItemsModifierGroupTranslation", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Pos.ItemsModifierGroup", "MenuItemModifierGroup")
                        .WithMany("ItemsModifierGroupTranslations")
                        .HasForeignKey("MenuItemModifierGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MenuItemModifierGroup");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.ItemsModifierGroupsAssociation", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Pos.MenuItem", "MenuItem")
                        .WithMany("MenuItemModifierGroups")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quivi.Domain.Entities.Pos.ItemsModifierGroup", "MenuItemModifierGroup")
                        .WithMany("ItemsModifierGroupsAssociation")
                        .HasForeignKey("MenuItemModifierGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("MenuItemModifierGroup");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.Location", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Merchants.Merchant", "Merchant")
                        .WithMany("Locations")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.MenuItem", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Pos.Location", "Location")
                        .WithMany("MenuItems")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Quivi.Domain.Entities.Merchants.Merchant", "Merchant")
                        .WithMany("MenuItems")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.MenuItemCategoryAssociation", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Pos.ItemCategory", "ItemCategory")
                        .WithMany("MenuItemCategoryAssociations")
                        .HasForeignKey("ItemCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quivi.Domain.Entities.Pos.MenuItem", "MenuItem")
                        .WithMany("MenuItemCategoryAssociations")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemCategory");

                    b.Navigation("MenuItem");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.MenuItemModifier", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Pos.MenuItem", "MenuItem")
                        .WithMany("MenuItemModifiers")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Quivi.Domain.Entities.Pos.ItemsModifierGroup", "MenuItemModifierGroup")
                        .WithMany("MenuItemModifiers")
                        .HasForeignKey("MenuItemModifierGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("MenuItemModifierGroup");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.MenuItemTranslation", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Pos.MenuItem", "MenuItem")
                        .WithMany("MenuItemTranslations")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MenuItem");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.MerchantCustomCharge", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Charges.Charge", "Charge")
                        .WithOne("MerchantCustomCharge")
                        .HasForeignKey("Quivi.Domain.Entities.Pos.MerchantCustomCharge", "ChargeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quivi.Domain.Entities.Pos.CustomChargeMethod", "CustomChargeMethod")
                        .WithMany()
                        .HasForeignKey("CustomChargeMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Charge");

                    b.Navigation("CustomChargeMethod");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.MerchantInvoiceDocument", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Charges.Charge", "Charge")
                        .WithMany("InvoiceDocuments")
                        .HasForeignKey("ChargeId");

                    b.HasOne("Quivi.Domain.Entities.Merchants.Merchant", "Merchant")
                        .WithMany("InvoiceDocuments")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Charge");

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.Order", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Pos.Channel", "Channel")
                        .WithMany("Orders")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quivi.Domain.Entities.Pos.Employee", "Employee")
                        .WithMany("Orders")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Quivi.Domain.Entities.Merchants.Merchant", "Merchant")
                        .WithMany("Orders")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quivi.Domain.Entities.Pos.Session", "Session")
                        .WithMany("Orders")
                        .HasForeignKey("SessionId");

                    b.Navigation("Channel");

                    b.Navigation("Employee");

                    b.Navigation("Merchant");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.OrderAdditionalInfo", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Pos.OrderConfigurableField", "OrderConfigurableField")
                        .WithMany("OrderAdditionalInfos")
                        .HasForeignKey("OrderConfigurableFieldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Quivi.Domain.Entities.Pos.Order", "Order")
                        .WithMany("OrderAdditionalInfos")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("OrderConfigurableField");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.OrderChangeLog", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Pos.Order", "Order")
                        .WithMany("OrderChangeLogs")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.OrderConfigurableField", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Merchants.Merchant", "Merchant")
                        .WithMany("OrderConfigurableFields")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.OrderConfigurableFieldChannelProfileAssociation", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Pos.ChannelProfile", "ChannelProfile")
                        .WithMany("AssociatedOrderConfigurableFields")
                        .HasForeignKey("ChannelProfileId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Quivi.Domain.Entities.Pos.OrderConfigurableField", "OrderConfigurableField")
                        .WithMany("AssociatedChannelProfiles")
                        .HasForeignKey("OrderConfigurableFieldId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ChannelProfile");

                    b.Navigation("OrderConfigurableField");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.OrderConfigurableFieldTranslation", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Pos.OrderConfigurableField", "OrderConfigurableField")
                        .WithMany("Translations")
                        .HasForeignKey("OrderConfigurableFieldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrderConfigurableField");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.OrderMenuItem", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Pos.MenuItem", "MenuItem")
                        .WithMany()
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quivi.Domain.Entities.Pos.ItemsModifierGroup", "MenuItemModifierGroup")
                        .WithMany()
                        .HasForeignKey("MenuItemModifierGroupId");

                    b.HasOne("Quivi.Domain.Entities.Pos.Order", "Order")
                        .WithMany("OrderMenuItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quivi.Domain.Entities.Pos.OrderMenuItem", "ParentOrderMenuItem")
                        .WithMany("Modifiers")
                        .HasForeignKey("ParentOrderMenuItemId");

                    b.Navigation("MenuItem");

                    b.Navigation("MenuItemModifierGroup");

                    b.Navigation("Order");

                    b.Navigation("ParentOrderMenuItem");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.OrderSequence", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Pos.Order", "Order")
                        .WithOne("OrderSequence")
                        .HasForeignKey("Quivi.Domain.Entities.Pos.OrderSequence", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.PosCharge", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Pos.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quivi.Domain.Entities.Charges.Charge", "Charge")
                        .WithOne("PosCharge")
                        .HasForeignKey("Quivi.Domain.Entities.Pos.PosCharge", "ChargeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quivi.Domain.Entities.Pos.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Quivi.Domain.Entities.Pos.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("Quivi.Domain.Entities.Merchants.Merchant", "Merchant")
                        .WithMany()
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Quivi.Domain.Entities.Pos.Employee", "RefundEmployee")
                        .WithMany()
                        .HasForeignKey("RefundEmployeeId");

                    b.HasOne("Quivi.Domain.Entities.Pos.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId");

                    b.Navigation("Channel");

                    b.Navigation("Charge");

                    b.Navigation("Employee");

                    b.Navigation("Location");

                    b.Navigation("Merchant");

                    b.Navigation("RefundEmployee");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.PosChargeInvoiceItem", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Pos.OrderMenuItem", "OrderMenuItem")
                        .WithMany("PosChargeInvoiceItems")
                        .HasForeignKey("OrderMenuItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Quivi.Domain.Entities.Pos.PosChargeInvoiceItem", "ParentPosChargeInvoiceItem")
                        .WithMany("ChildrenPosChargeInvoiceItems")
                        .HasForeignKey("ParentPosChargeInvoiceItemId");

                    b.HasOne("Quivi.Domain.Entities.Pos.PosCharge", "PosCharge")
                        .WithMany("PosChargeInvoiceItems")
                        .HasForeignKey("PosChargeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrderMenuItem");

                    b.Navigation("ParentPosChargeInvoiceItem");

                    b.Navigation("PosCharge");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.PosChargeSelectedMenuItem", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Pos.OrderMenuItem", "OrderMenuItem")
                        .WithMany()
                        .HasForeignKey("OrderMenuItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Quivi.Domain.Entities.Pos.PosCharge", "PosCharge")
                        .WithMany("PosChargeSelectedMenuItems")
                        .HasForeignKey("PosChargeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrderMenuItem");

                    b.Navigation("PosCharge");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.PosChargeSyncAttempt", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Pos.PosCharge", "PosCharge")
                        .WithMany("PosChargeSyncAttempts")
                        .HasForeignKey("PosChargeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PosCharge");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.PosIntegration", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Merchants.Merchant", "Merchant")
                        .WithMany("PosIntegrations")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.PosNotificationInboxMessage", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Pos.Employee", "Employee")
                        .WithMany("PosNotificationInboxMessages")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quivi.Domain.Entities.Pos.PosNotificationMessage", "PosNotificationMessage")
                        .WithMany("PosNotificationInboxes")
                        .HasForeignKey("PosNotificationMessageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("PosNotificationMessage");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.PosNotificationMessage", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Merchants.Merchant", "Merchant")
                        .WithMany("PosNotificationMessages")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.PreparationGroup", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Merchants.Merchant", "Merchant")
                        .WithMany("PreparationGroups")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Quivi.Domain.Entities.Pos.PreparationGroup", "ParentPreparationGroup")
                        .WithMany("ChildrenPreparationGroups")
                        .HasForeignKey("ParentPreparationGroupId");

                    b.HasOne("Quivi.Domain.Entities.Pos.Session", "Session")
                        .WithMany("PreparationGroups")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Merchant");

                    b.Navigation("ParentPreparationGroup");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.PreparationGroupItem", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Pos.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("Quivi.Domain.Entities.Pos.MenuItem", "MenuItem")
                        .WithMany("PreparationGroupItems")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quivi.Domain.Entities.Pos.PreparationGroupItem", "ParentPreparationGroupItem")
                        .WithMany("Extras")
                        .HasForeignKey("ParentPreparationGroupItemId");

                    b.HasOne("Quivi.Domain.Entities.Pos.PreparationGroup", "PreparationGroup")
                        .WithMany("PreparationGroupItems")
                        .HasForeignKey("PreparationGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("MenuItem");

                    b.Navigation("ParentPreparationGroupItem");

                    b.Navigation("PreparationGroup");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.PrinterWorker", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Merchants.Merchant", "Merchant")
                        .WithMany("PrinterWorkers")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.Review", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Pos.PosCharge", "PosCharge")
                        .WithOne("Review")
                        .HasForeignKey("Quivi.Domain.Entities.Pos.Review", "PosChargeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PosCharge");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.Session", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Pos.Channel", "Channel")
                        .WithMany("Sessions")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quivi.Domain.Entities.Pos.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.Navigation("Channel");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.SpatialChannel", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Pos.Channel", "Channel")
                        .WithMany("SpatialChannels")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.WeeklyAvailability", b =>
                {
                    b.HasOne("Quivi.Domain.Entities.Pos.AvailabilityGroup", "AvailabilityGroup")
                        .WithMany("WeeklyAvailabilities")
                        .HasForeignKey("AvailabilityGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilityGroup");
                });

            modelBuilder.Entity("Quivi.Domain.Repositories.EntityFramework.Identity.ApplicationRoleClaim", b =>
                {
                    b.HasOne("Quivi.Domain.Repositories.EntityFramework.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Quivi.Domain.Repositories.EntityFramework.Identity.ApplicationUserClaim", b =>
                {
                    b.HasOne("Quivi.Domain.Repositories.EntityFramework.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Quivi.Domain.Repositories.EntityFramework.Identity.ApplicationUserLogin", b =>
                {
                    b.HasOne("Quivi.Domain.Repositories.EntityFramework.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Quivi.Domain.Repositories.EntityFramework.Identity.ApplicationUserRole", b =>
                {
                    b.HasOne("Quivi.Domain.Repositories.EntityFramework.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quivi.Domain.Repositories.EntityFramework.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Quivi.Domain.Repositories.EntityFramework.Identity.ApplicationUserToken", b =>
                {
                    b.HasOne("Quivi.Domain.Repositories.EntityFramework.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Charges.Charge", b =>
                {
                    b.Navigation("AcquirerCharge");

                    b.Navigation("Deposit");

                    b.Navigation("InvoiceDocuments");

                    b.Navigation("MerchantCustomCharge");

                    b.Navigation("PosCharge");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Charges.Deposit", b =>
                {
                    b.Navigation("DepositCapture");

                    b.Navigation("DepositCaptureJournal");

                    b.Navigation("DepositJournal");

                    b.Navigation("DepositRefundJournal");

                    b.Navigation("DepositSurchage");

                    b.Navigation("DepositSurchargeJournal");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Financing.Journal", b =>
                {
                    b.Navigation("DepositCaptureJournals");

                    b.Navigation("DepositJournals");

                    b.Navigation("DepositRefundJournals");

                    b.Navigation("DepositSurchargeJournals");

                    b.Navigation("JournalChanges");

                    b.Navigation("JournalDetails");

                    b.Navigation("Postings");

                    b.Navigation("SettlementDetails");

                    b.Navigation("SettlementServiceDetails");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Financing.Person", b =>
                {
                    b.Navigation("ApiClients");

                    b.Navigation("MerchantService");

                    b.Navigation("Postings");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Financing.Settlement", b =>
                {
                    b.Navigation("SettlementDetails");

                    b.Navigation("SettlementServiceDetails");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Identity.ApiClient", b =>
                {
                    b.Navigation("ApiClientRequests");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Merchants.Merchant", b =>
                {
                    b.Navigation("AcquirerConfigurations");

                    b.Navigation("ApiClients");

                    b.Navigation("ChannelProfiles");

                    b.Navigation("Channels");

                    b.Navigation("ChildMerchants");

                    b.Navigation("CustomChargeMethods");

                    b.Navigation("Fees");

                    b.Navigation("Files");

                    b.Navigation("InvoiceDocuments");

                    b.Navigation("Locations");

                    b.Navigation("MenuItems");

                    b.Navigation("MerchantServices");

                    b.Navigation("NotificationContacts");

                    b.Navigation("OrderConfigurableFields");

                    b.Navigation("Orders");

                    b.Navigation("People");

                    b.Navigation("PosIntegrations");

                    b.Navigation("PosNotificationMessages");

                    b.Navigation("PreparationGroups");

                    b.Navigation("PrinterWorkers");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Notifications.NotificationsContact", b =>
                {
                    b.Navigation("AuditNotifications");

                    b.Navigation("EmployeeContact");

                    b.Navigation("PrinterContact");

                    b.Navigation("PushContact");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Notifications.PrinterNotificationMessage", b =>
                {
                    b.Navigation("PrinterMessageTargets");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Notifications.PrinterNotificationsContact", b =>
                {
                    b.Navigation("PrinterMessageTargets");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Notifications.PushNotificationDevice", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.AvailabilityGroup", b =>
                {
                    b.Navigation("AssociatedChannelProfiles");

                    b.Navigation("AssociatedMenuItems");

                    b.Navigation("WeeklyAvailabilities");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.Channel", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Sessions");

                    b.Navigation("SpatialChannels");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.ChannelProfile", b =>
                {
                    b.Navigation("AssociatedAvailabilityGroups");

                    b.Navigation("AssociatedOrderConfigurableFields");

                    b.Navigation("Channels");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.Employee", b =>
                {
                    b.Navigation("EmployeeContacts");

                    b.Navigation("Orders");

                    b.Navigation("PosNotificationInboxMessages");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.ItemCategory", b =>
                {
                    b.Navigation("ItemCategoryTranslations");

                    b.Navigation("MenuItemCategoryAssociations");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.ItemsModifierGroup", b =>
                {
                    b.Navigation("ItemsModifierGroupTranslations");

                    b.Navigation("ItemsModifierGroupsAssociation");

                    b.Navigation("MenuItemModifiers");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.Location", b =>
                {
                    b.Navigation("MenuItems");

                    b.Navigation("PrinterNotificationsContacts");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.MenuItem", b =>
                {
                    b.Navigation("AssociatedAvailabilityGroups");

                    b.Navigation("MenuItemCategoryAssociations");

                    b.Navigation("MenuItemModifierGroups");

                    b.Navigation("MenuItemModifiers");

                    b.Navigation("MenuItemTranslations");

                    b.Navigation("PreparationGroupItems");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.Order", b =>
                {
                    b.Navigation("OrderAdditionalInfos");

                    b.Navigation("OrderChangeLogs");

                    b.Navigation("OrderMenuItems");

                    b.Navigation("OrderSequence");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.OrderConfigurableField", b =>
                {
                    b.Navigation("AssociatedChannelProfiles");

                    b.Navigation("OrderAdditionalInfos");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.OrderMenuItem", b =>
                {
                    b.Navigation("Modifiers");

                    b.Navigation("PosChargeInvoiceItems");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.PosCharge", b =>
                {
                    b.Navigation("PosChargeInvoiceItems");

                    b.Navigation("PosChargeSelectedMenuItems");

                    b.Navigation("PosChargeSyncAttempts");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.PosChargeInvoiceItem", b =>
                {
                    b.Navigation("ChildrenPosChargeInvoiceItems");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.PosIntegration", b =>
                {
                    b.Navigation("ChannelProfiles");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.PosNotificationMessage", b =>
                {
                    b.Navigation("PosNotificationInboxes");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.PreparationGroup", b =>
                {
                    b.Navigation("ChildrenPreparationGroups");

                    b.Navigation("PreparationGroupItems");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.PreparationGroupItem", b =>
                {
                    b.Navigation("Extras");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.PrinterWorker", b =>
                {
                    b.Navigation("PrinterNotificationsContacts");
                });

            modelBuilder.Entity("Quivi.Domain.Entities.Pos.Session", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("PreparationGroups");
                });

            modelBuilder.Entity("Quivi.Domain.Repositories.EntityFramework.Identity.ApplicationUser", b =>
                {
                    b.Navigation("ApiClients");

                    b.Navigation("Person");
                });
#pragma warning restore 612, 618
        }
    }
}
