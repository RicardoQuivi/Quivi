name: Deploy to Azure Containers

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Build Containers to Azure"]
    types:
      - completed

env:
  ACR_NAME: quiviregistry
  RESOURCE_GROUP: quivi-resourcegroup
  LOCATION: westeurope
  IMAGE_TAG: ${{ github.sha }}

  ConnectionStrings__Quivi: ${{ secrets.CONNECTIONSTRINGS__QUIVI }}
  ConnectionStrings__OAuth: ${{ secrets.CONNECTIONSTRINGS__OAUTH }}
  Mailing__Provider: ${{ vars.MAILING__PROVIDER }}
  Mailing__FromAddress: ${{ vars.MAILING__FROMADDRESS }}
  Mailing__FromName: ${{ vars.MAILING__FROMNAME }}
  SendGrid__ApiKey: ${{ secrets.SENDGRID__APIKEY }}
  Smtp__Host: ${{ secrets.SMTP__HOST }}
  Smtp__Port: ${{ secrets.SMTP__PORT }}
  Smtp__Username: ${{ secrets.SMTP__USERNAME }}
  Smtp__Password: ${{ secrets.SMTP__PASSWORD }}
  RabbitMq__Hosts__0: ${{ secrets.RABBITMQ__HOSTS__0 }}
  RabbitMq__Username: ${{ secrets.RABBITMQ__USERNAME }}
  RabbitMq__Password: ${{ secrets.RABBITMQ__PASSWORD }}
  IdConverter__Salt: ${{ secrets.IDCONVERTER__SALT }}
  AppHosts__OAuth: ${{ vars.APPHOSTS__OAUTH }}
  AppHosts__Backoffice: ${{ vars.APPHOSTS__BACKOFFICE }}
  AppHosts__BackofficeApi: ${{ vars.APPHOSTS__BACKOFFICEAPI }}
  AppHosts__GuestsApp: ${{ vars.APPHOSTS__GUESTSAPP }}
  AppHosts__GuestsApi: ${{ vars.APPHOSTS__GUESTSAPI }}
  AppHosts__Pos: ${{ vars.APPHOSTS__POS }}
  JwtSettings__Issuer: ${{ secrets.JWTSETTINGS__ISSUER }}
  JwtSettings__Audiences__0: ${{ secrets.JWTSETTINGS__AUDIENCES__0 }}
  JwtSettings__Secret: ${{ secrets.JWTSETTINGS__SECRET }}
  JwtSettings__ExpireTimeSpan: ${{ secrets.JWTSETTINGS__EXPIRETIMESPAN }}
  JwtSettings__RefreshTokenExpireTimeSpan: ${{ secrets.JWTSETTINGS__REFRESHTOKENEXPIRETIMESPAN }}
  JwtSettings__Certificate__Base64: ${{ secrets.JWTSETTINGS__CERTIFICATE__BASE64 }}
  JwtSettings__Certificate__Password: ${{ secrets.JWTSETTINGS__CERTIFICATE__PASSWORD }}
  DefaultSettings__DefaultMerchantLogo: ${{ secrets.DEFAULTSETTINGS__DEFAULTMERCHANTLOGO }}
  Storage__Provider: ${{ vars.STORAGE__PROVIDER }}
  FileSystemStorage__Path: ${{ secrets.FILESYSTEMSTORAGE__PATH }}
  AzureBlobStorage__ConnectionString: ${{ secrets.AZUREBLOBSTORAGE__CONNECTIONSTRING }}
  AzureBlobStorage__VirtualDirectory: ${{ secrets.AZUREBLOBSTORAGE__VIRTUALDIRECTORY }}
  Invoicing__Provider: ${{ vars.INVOICING__PROVIDER }}
  Facturalusa__Host: ${{ secrets.FACTURALUSA__HOST }}
  Facturalusa__AccessToken: ${{ secrets.FACTURALUSA__ACCESSTOKEN }}
  Facturalusa__CommunicateSeries: ${{ secrets.FACTURALUSA__COMMUNICATESERIES }}

jobs:
  quivi-migrator:
    runs-on: ubuntu-latest
    environment: Sandbox
    steps:
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Log in to ACR
        run: az acr login --name $ACR_NAME

      - name: Create Environment file
        run: |
          printenv | grep '__' > github.env
        
      - name: Run Quivi.Migrator
        run: |
          docker run --env-file github.env --rm ${{ env.ACR_NAME }}.azurecr.io/quivi.migrator:${{ env.IMAGE_TAG }}

  quivi-oauth:
    needs:
      - quivi-migrator
    runs-on: ubuntu-latest
    environment: Sandbox
    env:
      Cors__AllowedOrigins__0: ${{ vars.APPHOSTS__BACKOFFICE }}
      Cors__AllowedOrigins__1: ${{ vars.APPHOSTS__POS }}
    steps:
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Log in to ACR
        run: az acr login --name $ACR_NAME

      - name: Load .env to single line separated variable
        id: load-env
        run: |
          env_vars=$(printenv | grep '__' | while IFS= read -r line; do
            # Skip empty lines and comments
            [[ -z "$line" || "$line" == \#* ]] && continue
            key="${line%%=*}"
            value="${line#*=}"
            # Escape inner quotes in value
            value_escaped="${value//\"/\\\"}"
            printf '%s="%s" ' "$key" "$value_escaped"
          done | sed 's/ *$//')
          echo "env_vars=$env_vars" >> "$GITHUB_OUTPUT"

      - name: Deploy Quivi.OAuth2
        uses: azure/container-apps-deploy-action@v2
        with:
          resourceGroup: ${{ env.RESOURCE_GROUP }}
          registryUrl: ${{ env.ACR_NAME }}.azurecr.io
          registryUsername: ${{ secrets.REGISTRY_USERNAME }}
          registryPassword: ${{ secrets.REGISTRY_PASSWORD }}
          containerAppEnvironment: sandbox-quivi-env
          imageToDeploy: ${{ env.ACR_NAME }}.azurecr.io/quivi.oauth2:${{ env.IMAGE_TAG }}
          containerAppName: sbx-oauth
          ingress: external
          environmentVariables: ${{ steps.load-env.outputs.env_vars }}
          targetPort: 8080

  quivi-backoffice-api:
    needs:
      - quivi-migrator
    runs-on: ubuntu-latest
    environment: Sandbox
    env:
      Cors__AllowedOrigins__0: ${{ vars.APPHOSTS__BACKOFFICE }}
      JwtSettings__Audiences__0: backoffice
    steps:
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Log in to ACR
        run: az acr login --name $ACR_NAME

      - name: Load .env to single line separated variable
        id: load-env
        run: |
          env_vars=$(printenv | grep '__' | while IFS= read -r line; do
            # Skip empty lines and comments
            [[ -z "$line" || "$line" == \#* ]] && continue
            key="${line%%=*}"
            value="${line#*=}"
            # Escape inner quotes in value
            value_escaped="${value//\"/\\\"}"
            printf '%s="%s" ' "$key" "$value_escaped"
          done | sed 's/ *$//')
          echo "env_vars=$env_vars" >> "$GITHUB_OUTPUT"

      - name: Deploy Quivi.Backoffice.Api
        uses: azure/container-apps-deploy-action@v2
        with:
          resourceGroup: ${{ env.RESOURCE_GROUP }}
          registryUrl: ${{ env.ACR_NAME }}.azurecr.io
          registryUsername: ${{ secrets.REGISTRY_USERNAME }}
          registryPassword: ${{ secrets.REGISTRY_PASSWORD }}
          containerAppEnvironment: sandbox-quivi-env
          imageToDeploy: ${{ env.ACR_NAME }}.azurecr.io/quivi.backoffice.api:${{ env.IMAGE_TAG }}
          containerAppName: sbx-backoffice-api
          ingress: external
          environmentVariables: ${{ steps.load-env.outputs.env_vars }}
          targetPort: 8080

  quivi-hangfire:
    needs:
      - quivi-migrator
    runs-on: ubuntu-latest
    environment: Sandbox
    steps:
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Log in to ACR
        run: az acr login --name $ACR_NAME

      - name: Load .env to single line separated variable
        id: load-env
        run: |
          env_vars=$(printenv | grep '__' | while IFS= read -r line; do
            # Skip empty lines and comments
            [[ -z "$line" || "$line" == \#* ]] && continue
            key="${line%%=*}"
            value="${line#*=}"
            # Escape inner quotes in value
            value_escaped="${value//\"/\\\"}"
            printf '%s="%s" ' "$key" "$value_escaped"
          done | sed 's/ *$//')
          echo "env_vars=$env_vars" >> "$GITHUB_OUTPUT"

      - name: Deploy Quivi.Hangfire
        uses: azure/container-apps-deploy-action@v2
        with:
          resourceGroup: ${{ env.RESOURCE_GROUP }}
          registryUrl: ${{ env.ACR_NAME }}.azurecr.io
          registryUsername: ${{ secrets.REGISTRY_USERNAME }}
          registryPassword: ${{ secrets.REGISTRY_PASSWORD }}
          containerAppEnvironment: sandbox-quivi-env
          imageToDeploy: ${{ env.ACR_NAME }}.azurecr.io/quivi.hangfire:${{ env.IMAGE_TAG }}
          containerAppName: sbx-background
          ingress: external
          environmentVariables: ${{ steps.load-env.outputs.env_vars }}
          targetPort: 8080

  quivi-signalr:
    needs:
      - quivi-migrator
    runs-on: ubuntu-latest
    environment: Sandbox
    env:
      Cors__AllowedOrigins__0: ${{ vars.APPHOSTS__BACKOFFICE }}
      Cors__AllowedOrigins__1: ${{ vars.APPHOSTS__POS }}
      JwtSettings__Audiences__0: backoffice
      JwtSettings__Audiences__1: pos
    steps:
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Log in to ACR
        run: az acr login --name $ACR_NAME

      - name: Load .env to single line separated variable
        id: load-env
        run: |
          env_vars=$(printenv | grep '__' | while IFS= read -r line; do
            # Skip empty lines and comments
            [[ -z "$line" || "$line" == \#* ]] && continue
            key="${line%%=*}"
            value="${line#*=}"
            # Escape inner quotes in value
            value_escaped="${value//\"/\\\"}"
            printf '%s="%s" ' "$key" "$value_escaped"
          done | sed 's/ *$//')
          echo "env_vars=$env_vars" >> "$GITHUB_OUTPUT"

      - name: Deploy Quivi.SignalR
        uses: azure/container-apps-deploy-action@v2
        with:
          resourceGroup: ${{ env.RESOURCE_GROUP }}
          registryUrl: ${{ env.ACR_NAME }}.azurecr.io
          registryUsername: ${{ secrets.REGISTRY_USERNAME }}
          registryPassword: ${{ secrets.REGISTRY_PASSWORD }}
          containerAppEnvironment: sandbox-quivi-env
          imageToDeploy: ${{ env.ACR_NAME }}.azurecr.io/quivi.signalr:${{ env.IMAGE_TAG }}
          containerAppName: sbx-events
          ingress: external
          environmentVariables: ${{ steps.load-env.outputs.env_vars }}
          targetPort: 8080

  quivi-pos-api:
    needs:
      - quivi-migrator
    runs-on: ubuntu-latest
    environment: Sandbox
    env:
      Cors__AllowedOrigins__0: ${{ vars.APPHOSTS__POS }}
      JwtSettings__Audiences__0: pos
    steps:
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Log in to ACR
        run: az acr login --name $ACR_NAME

      - name: Load .env to single line separated variable
        id: load-env
        run: |
          env_vars=$(printenv | grep '__' | while IFS= read -r line; do
            # Skip empty lines and comments
            [[ -z "$line" || "$line" == \#* ]] && continue
            key="${line%%=*}"
            value="${line#*=}"
            # Escape inner quotes in value
            value_escaped="${value//\"/\\\"}"
            printf '%s="%s" ' "$key" "$value_escaped"
          done | sed 's/ *$//')
          echo "env_vars=$env_vars" >> "$GITHUB_OUTPUT"

      - name: Deploy Quivi.Pos.Api
        uses: azure/container-apps-deploy-action@v2
        with:
          resourceGroup: ${{ env.RESOURCE_GROUP }}
          registryUrl: ${{ env.ACR_NAME }}.azurecr.io
          registryUsername: ${{ secrets.REGISTRY_USERNAME }}
          registryPassword: ${{ secrets.REGISTRY_PASSWORD }}
          containerAppEnvironment: sandbox-quivi-env
          imageToDeploy: ${{ env.ACR_NAME }}.azurecr.io/quivi.pos.api:${{ env.IMAGE_TAG }}
          containerAppName: sbx-pos-api
          ingress: external
          environmentVariables: ${{ steps.load-env.outputs.env_vars }}
          targetPort: 8080
          runtimeStack: 'dotnetcore:8.0'

  quivi-guests-api:
    needs:
      - quivi-migrator
    runs-on: ubuntu-latest
    environment: Sandbox
    env:
      Cors__AllowedOrigins__0: ${{ vars.APPHOSTS__GUESTSAPP }}
      JwtSettings__Audiences__0: guests
    steps:
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Log in to ACR
        run: az acr login --name $ACR_NAME

      - name: Load .env to single line separated variable
        id: load-env
        run: |
          env_vars=$(printenv | grep '__' | while IFS= read -r line; do
            # Skip empty lines and comments
            [[ -z "$line" || "$line" == \#* ]] && continue
            key="${line%%=*}"
            value="${line#*=}"
            # Escape inner quotes in value
            value_escaped="${value//\"/\\\"}"
            printf '%s="%s" ' "$key" "$value_escaped"
          done | sed 's/ *$//')
          echo "env_vars=$env_vars" >> "$GITHUB_OUTPUT"

      - name: Deploy Quivi.Guests.Api
        uses: azure/container-apps-deploy-action@v2
        with:
          resourceGroup: ${{ env.RESOURCE_GROUP }}
          registryUrl: ${{ env.ACR_NAME }}.azurecr.io
          registryUsername: ${{ secrets.REGISTRY_USERNAME }}
          registryPassword: ${{ secrets.REGISTRY_PASSWORD }}
          containerAppEnvironment: sandbox-quivi-env
          imageToDeploy: ${{ env.ACR_NAME }}.azurecr.io/quivi.guests.api:${{ env.IMAGE_TAG }}
          containerAppName: sbx-guests-api
          ingress: external
          environmentVariables: ${{ steps.load-env.outputs.env_vars }}
          targetPort: 8080
          runtimeStack: 'dotnetcore:8.0'

  quivi-backoffice-app:
    needs:
      - quivi-migrator
    runs-on: ubuntu-latest
    environment: Sandbox
    steps:
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Log in to ACR
        run: az acr login --name $ACR_NAME

      - name: Load .env to single line separated variable
        id: load-env
        run: |
          env_vars=$(printenv | grep '__' | while IFS= read -r line; do
            # Skip empty lines and comments
            [[ -z "$line" || "$line" == \#* ]] && continue
            key="${line%%=*}"
            value="${line#*=}"
            # Escape inner quotes in value
            value_escaped="${value//\"/\\\"}"
            printf '%s="%s" ' "$key" "$value_escaped"
          done | sed 's/ *$//')
          echo "env_vars=$env_vars" >> "$GITHUB_OUTPUT"

      - name: Deploy quivi.backoffice.react.webapp
        uses: azure/container-apps-deploy-action@v2
        with:
          resourceGroup: ${{ env.RESOURCE_GROUP }}
          registryUrl: ${{ env.ACR_NAME }}.azurecr.io
          registryUsername: ${{ secrets.REGISTRY_USERNAME }}
          registryPassword: ${{ secrets.REGISTRY_PASSWORD }}
          containerAppEnvironment: sandbox-quivi-env
          imageToDeploy: ${{ env.ACR_NAME }}.azurecr.io/quivi.backoffice.react.webapp:${{ env.IMAGE_TAG }}
          containerAppName: sbx-backoffice
          ingress: external
          environmentVariables: ${{ steps.load-env.outputs.env_vars }}
          targetPort: 3010

  quivi-pos-app:
    needs:
      - quivi-migrator
    runs-on: ubuntu-latest
    environment: Sandbox
    steps:
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Log in to ACR
        run: az acr login --name $ACR_NAME

      - name: Load .env to single line separated variable
        id: load-env
        run: |
          env_vars=$(printenv | grep '__' | while IFS= read -r line; do
            # Skip empty lines and comments
            [[ -z "$line" || "$line" == \#* ]] && continue
            key="${line%%=*}"
            value="${line#*=}"
            # Escape inner quotes in value
            value_escaped="${value//\"/\\\"}"
            printf '%s="%s" ' "$key" "$value_escaped"
          done | sed 's/ *$//')
          echo "env_vars=$env_vars" >> "$GITHUB_OUTPUT"

      - name: Deploy quivi.pos.react.app
        uses: azure/container-apps-deploy-action@v2
        with:
          resourceGroup: ${{ env.RESOURCE_GROUP }}
          registryUrl: ${{ env.ACR_NAME }}.azurecr.io
          registryUsername: ${{ secrets.REGISTRY_USERNAME }}
          registryPassword: ${{ secrets.REGISTRY_PASSWORD }}
          containerAppEnvironment: sandbox-quivi-env
          imageToDeploy: ${{ env.ACR_NAME }}.azurecr.io/quivi.pos.react.app:${{ env.IMAGE_TAG }}
          containerAppName: sbx-pos
          ingress: external
          environmentVariables: ${{ steps.load-env.outputs.env_vars }}
          targetPort: 3011

  quivi-guests-app:
    needs:
      - quivi-migrator
    runs-on: ubuntu-latest
    environment: Sandbox
    steps:
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Log in to ACR
        run: az acr login --name $ACR_NAME

      - name: Load .env to single line separated variable
        id: load-env
        run: |
          env_vars=$(printenv | grep '__' | while IFS= read -r line; do
            # Skip empty lines and comments
            [[ -z "$line" || "$line" == \#* ]] && continue
            key="${line%%=*}"
            value="${line#*=}"
            # Escape inner quotes in value
            value_escaped="${value//\"/\\\"}"
            printf '%s="%s" ' "$key" "$value_escaped"
          done | sed 's/ *$//')
          echo "env_vars=$env_vars" >> "$GITHUB_OUTPUT"

      - name: Deploy quivi.guests.react.app
        uses: azure/container-apps-deploy-action@v2
        with:
          resourceGroup: ${{ env.RESOURCE_GROUP }}
          registryUrl: ${{ env.ACR_NAME }}.azurecr.io
          registryUsername: ${{ secrets.REGISTRY_USERNAME }}
          registryPassword: ${{ secrets.REGISTRY_PASSWORD }}
          containerAppEnvironment: sandbox-quivi-env
          imageToDeploy: ${{ env.ACR_NAME }}.azurecr.io/quivi.guests.react.app:${{ env.IMAGE_TAG }}
          containerAppName: sbx-guests
          ingress: external
          environmentVariables: ${{ steps.load-env.outputs.env_vars }}
          targetPort: 3012

  disable-container-cors:
    needs:
      - quivi-migrator
      - quivi-oauth
      - quivi-hangfire
      - quivi-signalr
      - quivi-backoffice-api
      - quivi-pos-api
      - quivi-guests-api
      - quivi-backoffice-app
      - quivi-pos-app
      - quivi-guests-app
    runs-on: ubuntu-latest
    steps:
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Disable Azure platform CORS for all container apps
        run: |
          APPS=("sbx-oauth" "sbx-backoffice-api" "sbx-background" "sbx-events" "sbx-pos-api" "sbx-backoffice" "sbx-pos" "sbx-guests-api" "sbx-guests")
          for APP in "${APPS[@]}"; do
            az containerapp ingress cors update \
              --name "$APP" \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --allowed-origins "*"
          done