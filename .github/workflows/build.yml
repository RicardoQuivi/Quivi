name: Build Containers to Azure

on:
  push:
    branches:
      - main

permissions:
  contents: write

env:
  ACR_NAME: quiviregistry
  RESOURCE_GROUP: quivi-resourcegroup
  LOCATION: westeurope
  IMAGE_TAG: ${{ github.sha }}

jobs:
  quivi-migrator:
    runs-on: ubuntu-latest
    environment: Sandbox
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@main

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Log in to ACR
        run: az acr login --name $ACR_NAME

      - name: Build Quivi.Migrator
        run: |
          docker build -t ${{ env.ACR_NAME }}.azurecr.io/quivi.migrator:$IMAGE_TAG -f Quivi.Migrator/Dockerfile .
          docker push ${{ env.ACR_NAME }}.azurecr.io/quivi.migrator:$IMAGE_TAG

  quivi-oauth:
    runs-on: ubuntu-latest
    environment: Sandbox
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@main

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Log in to ACR
        run: az acr login --name $ACR_NAME
      - name: Build Quivi.OAuth2
        run: |
          docker build -t ${{ env.ACR_NAME }}.azurecr.io/quivi.oauth2:$IMAGE_TAG -f Quivi.OAuth2/Dockerfile .
          docker push ${{ env.ACR_NAME }}.azurecr.io/quivi.oauth2:$IMAGE_TAG

  quivi-backoffice-api:
    runs-on: ubuntu-latest
    environment: Sandbox
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@main

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Log in to ACR
        run: az acr login --name $ACR_NAME

      - name: Build Quivi.Backoffice.Api
        run: |
          docker build -t ${{ env.ACR_NAME }}.azurecr.io/quivi.backoffice.api:$IMAGE_TAG -f Quivi.Backoffice.Api/Dockerfile .
          docker push ${{ env.ACR_NAME }}.azurecr.io/quivi.backoffice.api:$IMAGE_TAG

  quivi-hangfire:
    runs-on: ubuntu-latest
    environment: Sandbox
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@main

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Log in to ACR
        run: az acr login --name $ACR_NAME

      - name: Build Quivi.Hangfire
        run: |
          docker build -t ${{ env.ACR_NAME }}.azurecr.io/quivi.hangfire:$IMAGE_TAG -f Quivi.Hangfire/Dockerfile .
          docker push ${{ env.ACR_NAME }}.azurecr.io/quivi.hangfire:$IMAGE_TAG

  quivi-signalr:
    runs-on: ubuntu-latest
    environment: Sandbox
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@main

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Log in to ACR
        run: az acr login --name $ACR_NAME

      - name: Build Quivi.SignalR
        run: |
          docker build -t ${{ env.ACR_NAME }}.azurecr.io/quivi.signalr:$IMAGE_TAG -f Quivi.SignalR/Dockerfile .
          docker push ${{ env.ACR_NAME }}.azurecr.io/quivi.signalr:$IMAGE_TAG

  quivi-pos-api:
    runs-on: ubuntu-latest
    environment: Sandbox
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@main

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Log in to ACR
        run: az acr login --name $ACR_NAME

      - name: Build Quivi.Pos.Api
        run: |
          docker build -t ${{ env.ACR_NAME }}.azurecr.io/quivi.pos.api:$IMAGE_TAG -f Quivi.Pos.Api/Dockerfile .
          docker push ${{ env.ACR_NAME }}.azurecr.io/quivi.pos.api:$IMAGE_TAG

  quivi-backoffice-app:
    runs-on: ubuntu-latest
    environment: Sandbox
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@main

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Log in to ACR
        run: az acr login --name $ACR_NAME

      - name: Build quivi.backoffice.react.webapp
        run: |
          docker build \
          --build-arg OAUTH_URL=${{ vars.APPHOSTS__OAUTH }} \
          --build-arg API_URL=${{ vars.APPHOSTS__BACKOFFICEAPI }} \
          --build-arg SIGNALR_URL=${{ vars.APPHOSTS__SIGNALR }} \
          --build-arg POS_URL=${{ vars.APPHOSTS__POS }} \
          -t ${{ env.ACR_NAME }}.azurecr.io/quivi.backoffice.react.webapp:$IMAGE_TAG -f quivi.backoffice.react.webapp/Dockerfile quivi.backoffice.react.webapp
          docker push ${{ env.ACR_NAME }}.azurecr.io/quivi.backoffice.react.webapp:$IMAGE_TAG

  quivi-pos-app:
    runs-on: ubuntu-latest
    environment: Sandbox
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@main

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Log in to ACR
        run: az acr login --name $ACR_NAME

      - name: Build quivi.pos.react.app
        run: |
          docker build \
          --build-arg OAUTH_URL=${{ vars.APPHOSTS__OAUTH }} \
          --build-arg API_URL=${{ vars.APPHOSTS__POSAPI }} \
          --build-arg SIGNALR_URL=${{ vars.APPHOSTS__SIGNALR }} \
          --build-arg BACKOFFICE_URL=${{ vars.APPHOSTS__BACKOFFICE }} \
          -t ${{ env.ACR_NAME }}.azurecr.io/quivi.pos.react.app:$IMAGE_TAG -f quivi.pos.react.app/Dockerfile quivi.pos.react.app
          docker push ${{ env.ACR_NAME }}.azurecr.io/quivi.pos.react.app:$IMAGE_TAG

  create-tag:
    needs:
      - quivi-migrator
      - quivi-oauth
      - quivi-backoffice-api
      - quivi-hangfire
      - quivi-signalr
      - quivi-pos-api
      - quivi-backoffice-app
      - quivi-pos-app
    runs-on: ubuntu-latest
    environment: Sandbox
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@main

      - name: Tag commit
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          # Fetch tags from remote
          git fetch --tags

          DATE=$(date +'%Y%m%d')

          # Find existing tags matching todayâ€™s date, extract the number suffix, sort and get the max
          LAST_NUMBER=$(git tag -l "build-$DATE.*" | sed -E "s/build-$DATE\.([0-9]{3})/\1/" | sort -nr | head -n1)

          if [ -z "$LAST_NUMBER" ]; then
            NEXT_NUMBER=1
          else
            NEXT_NUMBER=$((10#$LAST_NUMBER + 1))
          fi

          # Pad number with leading zeros to 3 digits
          NEXT_NUMBER_PADDED=$(printf "%03d" $NEXT_NUMBER)

          TAG_NAME="v-$DATE.$NEXT_NUMBER_PADDED-${GITHUB_SHA::7}"

          echo "Tag to create: $TAG_NAME"

          git tag "$TAG_NAME"
          git push origin "$TAG_NAME"